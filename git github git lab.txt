
---

# ðŸ“˜ Git, GitHub & GitLab â€“ Complete Notes

---
Version Control:
When working with digital files, whether is a .docx word file or a programming .py
python file, you probaly don't finish all your work at once.

inthis case, the software you use to manage and track changes in these files is your version control.

* **Git** â†’ Distributed Version Control System (DVCS).
* **GitHub** â†’ Cloud-based hosting for Git repositories, mainly used for collaboration (Pull Requests).
* **GitLab** â†’ Similar to GitHub but also includes DevOps tools (Merge Requests, CI/CD pipelines).

clone:
git clone -b Folder_name https://gitlab.git

ðŸš€ Push Local File into GitHub Repository
1. Initialize Git in your local folder
cd C:\Users\ajith\OneDrive - MSFT\Documents\GitHub\GitHub Notes
git init

2.Add Your file(s)
git add "git github git lab.txt" //git github git lab.txt=>file_name
git add .
3.commit your changes
git commit -m "git github git lab.txt" -> commit name double quotes ""

4.Connect with GitHub repository
Go to GitHub â†’ New Repository â†’ Copy the repo URL (HTTPS or SSH).
Example (HTTPS):
git remote add origin https://github.com/Ajithkumar74/GIT.git

(Replace username and repo-name with yours)
5. Push to GitHub
git branch -M main             # Rename default branch to main (if needed)
git push -u origin main        # Push code to GitHub


# ðŸ”„ Git Undo Commands (Cheat Sheet)

### 1. **Undo changes in working directory (before staging)**

ðŸ‘‰ Discard modifications in a file (go back to last commit):

git checkout -- <file>


ðŸ‘‰ Discard ALL uncommitted changes:


git checkout -- .

### 2. **Undo changes after staging (`git add`) but before commit**

ðŸ‘‰ Unstage file (keep changes in working directory):

git reset <file>

ðŸ‘‰ Unstage everything:

git reset

### 3. **Undo committed changes (but keep history safe)**

ðŸ‘‰ Create a new commit that undoes the previous commit:

git revert <commit-id>


### 4. **Undo commit (dangerous: rewrites history)**

ðŸ‘‰ Reset HEAD to a specific commit, discard everything after it:

git reset --hard <commit-id>

ðŸ‘‰ Reset HEAD to previous commit (delete last commit completely):

git reset --hard HEAD~1

### 5. **Remove untracked files**

ðŸ‘‰ Delete all untracked files (âš  irreversible):

git clean -f

ðŸ‘‰ Delete untracked files + directories:

git clean -fd


âœ… So, rule of thumb:

* **Working directory** â†’ `git checkout -- file`
* **Staged** â†’ `git reset file`
* **Committed** â†’ `git revert` (safe) OR `git reset --hard` (dangerous)


## 1. ðŸ”¹ Basics

* **Git** â†’ Distributed Version Control System (DVCS).
* **GitHub** â†’ Cloud-based hosting for Git repositories, mainly used for collaboration (Pull Requests).
* **GitLab** â†’ Similar to GitHub but also includes DevOps tools (Merge Requests, CI/CD pipelines).

---

## 2. ðŸ”¹ Git Configuration Commands

```bash
git config --global user.name "Your Name"           # Set username
git config --global user.email "you@example.com"   # Set email
git config --list                                  # View all config
```

---

## 3. ðŸ”¹ Repository Commands

```bash
git init                     # Initialize new repo
git clone <repo-url>         # Clone repo from GitHub/GitLab
git status                   # Show changes
git log                      # Commit history
git diff                     # Show unstaged changes
```

---

## 4. ðŸ”¹ Staging & Committing

```bash
git add <file>               # Stage specific file
git add .                    # Stage all files
git commit -m "message"      # Commit staged files
git commit -am "message"     # Add + commit tracked files
```

---

## 5. ðŸ”¹ Branching

```bash
git branch                   # List branches
git branch <branch-name>     # Create new branch
git checkout <branch-name>   # Switch branch
git checkout -b <branch>     # Create + switch branch
git merge <branch>           # Merge branch into current
git branch -d <branch>       # Delete branch (safe)
git branch -D <branch>       # Force delete branch
```

---

## 6. ðŸ”¹ Remote Repositories

```bash
git remote -v                              # Show remote repos
git remote add origin <repo-url>           # Add remote
git remote remove origin                   # Remove remote
git push origin main                       # Push changes to main
git pull origin main                       # Pull changes from main
git fetch origin                           # Fetch changes (no merge)
```

---

## 7. ðŸ”¹ Syncing Work

```bash
git pull --rebase origin main              # Rebase local with remote
git merge origin/main                      # Merge remote changes
```

ðŸ‘‰ **Rebase** = clean history,
ðŸ‘‰ **Merge** = keeps merge commit.

---

## 8. ðŸ”¹ Undo & Reset

```bash
git checkout -- <file>       # Discard local changes
git reset <file>             # Unstage file
git reset --hard HEAD        # Discard all changes
git revert <commit-id>       # Undo commit (safe, keeps history)
git reset --hard <commit-id> # Reset to commit (dangerous)
```

---

## 9. ðŸ”¹ Stash (Save Work Temporarily)

```bash
git stash                    # Stash changes
git stash list               # List stashes
git stash pop                # Reapply last stash
git stash drop               # Delete stash
```

---

## 10. ðŸ”¹ Tags

```bash
git tag v1.0                 # Create tag
git tag                      # List tags
git push origin v1.0         # Push tag
git push --tags              # Push all tags
```

---

## 11. ðŸ”¹ GitHub Flow (Pull Request)

1. Fork repo â†’ Clone â†’ Create branch
2. Make changes â†’ Commit â†’ Push branch
3. Open **Pull Request (PR)** on GitHub
4. Reviewer approves â†’ Merge PR â†’ Delete branch

Commands:

```bash
git push origin feature-branch
```

Then create PR from GitHub UI.

---

## 12. ðŸ”¹ GitLab Flow (Merge Request)

Similar to GitHub but called **Merge Request (MR)**.
Also integrates with **CI/CD Pipelines**.

---

## 13. ðŸ”¹ Git Collaboration Commands

```bash
git fetch origin                 # Get all remote updates
git pull origin develop          # Sync develop branch
git rebase origin/develop        # Rebase onto develop
git push origin feature-branch   # Push feature branch
```

---

## 14. ðŸ”¹ Common Workflows

### a) Feature Branch Workflow

```bash
git checkout -b feature-login
... work ...
git commit -am "Login feature"
git push origin feature-login
```

Then create PR/MR.

### b) Hotfix Workflow

```bash
git checkout main
git pull origin main
git checkout -b hotfix-bug
... fix ...
git commit -m "Bug fixed"
git push origin hotfix-bug
```

---

## 15. ðŸ”¹ Useful Shortcuts

```bash
git log --oneline --graph --all    # Visual commit history
git shortlog -sn                   # Show contributors
git reflog                         # Show history of HEAD
git cherry-pick <commit-id>        # Apply specific commit
```

---

âœ… With this, you have a **complete Git, GitHub & GitLab commands cheat sheet**.

Do you want me to also create a **visual workflow diagram (like GitHub flow + GitLab flow)** for easier memory?
