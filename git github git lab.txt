
---

# ðŸ“˜ Git, GitHub & GitLab â€“ Complete Notes

---
Version Control:
When working with digital files, whether is a .docx word file or a programming .py
python file, you probaly don't finish all your work at once.

inthis case, the software you use to manage and track changes in these files is your version control.

* Version control system(VCS) allows us to track changes, undo changes,compare versions, work with others, and more! 
* git itself is on examples of a vcs, and while there are others(subversion, mercurial,etc..), git is by far the most popular VSC in the world.

* unfortunately for us git is free and open-source and we can download it to our own computer.

What is Github>(or GitLab?)
* You can use git completely free locally, and use it to track changes on your local files on your own computer.

* However if you want to host your code on the internet, its typically easier to use a hosting service like GitHub.

* GitHub(owned by microsoft) integrates easily with git and allows you to have versions of your code "live" on the internet for you and others to access, update, and changes from any machine.

* GitHub is not the same thing as "git".
Git: Open source VCS software.
GitHub:
Company that operates a service for hosting files on the internet that are managed using git.
* A VCS such as git allows you to add "save points" to your work, create changes, update existing code,undo changes, create branches for others to work on, and merge work together.

Repository:
The main place we track chnages and manage our files tht are using Git is called a repository.

How can we create a Git Repository?

* Upon creating a repository  with git init  you will create a hidden .git file.
* The .git  file is a hidden file that manges the versioning of the files inside the Git repository.
* We can also use the Graphical Interface with GitHub Desktop or we can even create a new repository online at WWW.github.com
* Then we can git clone this repository to our local machine.
Private Repositories:
public repositories with the git clone command and then the HTTPS URL for the public repostory
How to deal with Private Repositories we wish to clone

Option 1: Command Line:
* Create Personal Access tokens (PAT) on Git Hub.com
When using the git clone command, reference the PAT.
Option 2:GitHub Desktop Tool GUI:
* Open the Github Desktop tool
* Login with GitHub Username and PW 
* Clone Repo via GUI

Git inside a FOlder/Directory:
* Upon creating a Git Repository, all the folders/directories inside the top level Git Repository will also be part of that Repository, meaning all changes are tracked.

* **Git** â†’ Distributed Version Control System (DVCS).
* **GitHub** â†’ Cloud-based hosting for Git repositories, mainly used for collaboration (Pull Requests).
* **GitLab** â†’ Similar to GitHub but also includes DevOps tools (Merge Requests, CI/CD pipelines).

clone:
git clone -b Folder_name https://gitlab.git

Working Directory -> Staging Area --> Repository
some hello.java       ---------      "java code"
index.html           <----git pull    index.html
style.css                             style.css
                                      "site files"
git fetch:
using git fetch makes sense when you're working with others and want to see what  changes they've made but aren't ready to overwrite your own files yet.
Also if you are simply working by yourself, you may want to just fetch remote changes without overwriting your latest work  (later we'll discover branches are a better way of doing this).
Git pull:
* using git pull makes sense when you want to directly grab changes from the remote branch and directly merge them into your current branch.
* This means you will literally update the file sin your working  directory to match up and merge  with the remote branch.

ðŸš€ Push Local File into GitHub Repository
1. Initialize Git in your local folder
cd C:\Users\ajith\OneDrive - MSFT\Documents\GitHub\GitHub Notes
git init -this command initilizies a Git Repository on your local machine. You only need to run this command once per project.

git status:
This command will report back the status of your Git repository.

2.Add Your file(s)
git add "git github git lab.txt" //git github git lab.txt=>file_name
git add .
3.commit your changes
We can think of these as "commits", where we've informed Git about specific changes to files.
A Git Commit doesn't just pertain to a saving chnages in a single file.It can constitute specific changes across an entire working directory.

git commit -m "git github git lab.txt" -> commit name double quotes ""

4.Connect with GitHub repository
Go to GitHub â†’ New Repository â†’ Copy the repo URL (HTTPS or SSH).
Example (HTTPS):
git remote add origin https://github.com/Ajithkumar74/GIT.git
check remote branches command:git remote -v
if you don't have any remote 
add remote 
git remote add origin URL

There are two options of getting repository changes from a remote branch (like the remote branch on GitHub).
* git pull
* git fetch
                 git add         git commit         git push
working directory--->staging area--->local repository--->remote Repository
(Replace username and repo-name with yours)
5. Push to GitHub
git branch -M main             # Rename default branch to main (if needed)
git push -u origin main        # Push code to GitHub


# ðŸ”„ Git Undo Commands (Cheat Sheet)

### 1. **Undo changes in working directory (before staging)**

ðŸ‘‰ Discard modifications in a file (go back to last commit):

git checkout -- <file>


ðŸ‘‰ Discard ALL uncommitted changes:


git checkout -- .

### 2. **Undo changes after staging (`git add`) but before commit**

ðŸ‘‰ Unstage file (keep changes in working directory):

git reset <file>

ðŸ‘‰ Unstage everything:

git reset

### 3. **Undo committed changes (but keep history safe)**

ðŸ‘‰ Create a new commit that undoes the previous commit:

git revert <commit-id>


### 4. **Undo commit (dangerous: rewrites history)**

ðŸ‘‰ Reset HEAD to a specific commit, discard everything after it:

git reset --hard <commit-id>

ðŸ‘‰ Reset HEAD to previous commit (delete last commit completely):

git reset --hard HEAD~1

### 5. **Remove untracked files**

ðŸ‘‰ Delete all untracked files (âš  irreversible):

git clean -f

ðŸ‘‰ Delete untracked files + directories:

git clean -fd


âœ… So, rule of thumb:

* **Working directory** â†’ `git checkout -- file`
* **Staged** â†’ `git reset file`
* **Committed** â†’ `git revert` (safe) OR `git reset --hard` (dangerous)


## 1. ðŸ”¹ Basics

* **Git** â†’ Distributed Version Control System (DVCS).
* **GitHub** â†’ Cloud-based hosting for Git repositories, mainly used for collaboration (Pull Requests).
* **GitLab** â†’ Similar to GitHub but also includes DevOps tools (Merge Requests, CI/CD pipelines).

---

## 2. ðŸ”¹ Git Configuration Commands

```bash
git config --global user.name "Your Name"           # Set username
git config --global user.email "you@example.com"   # Set email
git config --list                                  # View all config
```

---

## 3. ðŸ”¹ Repository Commands

```bash
git init                     # Initialize new repo
git clone <repo-url>         # Clone repo from GitHub/GitLab
git status                   # Show changes
git log                      # Commit history
git diff                     # Show unstaged changes
```

---

## 4. ðŸ”¹ Staging & Committing

```bash
git add <file>               # Stage specific file
git add .                    # Stage all files
git commit -m "message"      # Commit staged files
git commit -am "message"     # Add + commit tracked files
```

---

## 5. ðŸ”¹ Branching

```bash
git branch                   # List branches
git branch <branch-name>     # Create new branch
git checkout <branch-name>   # Switch branch
git checkout -b <branch>     # Create + switch branch
git merge <branch>           # Merge branch into current
git branch -d <branch>       # Delete branch (safe)
git branch -D <branch>       # Force delete branch
```

---

## 6. ðŸ”¹ Remote Repositories

```bash
git remote -v                              # Show remote repos
git remote add origin <repo-url>           # Add remote
git remote remove origin                   # Remove remote
git push origin main                       # Push changes to main
git pull origin main                       # Pull changes from main
git fetch origin                           # Fetch changes (no merge)
```

---

## 7. ðŸ”¹ Syncing Work

```bash
git pull --rebase origin main              # Rebase local with remote
git merge origin/main                      # Merge remote changes
```

ðŸ‘‰ **Rebase** = clean history,
ðŸ‘‰ **Merge** = keeps merge commit.

---

## 8. ðŸ”¹ Undo & Reset

```bash
git checkout -- <file>       # Discard local changes
git reset <file>             # Unstage file
git reset --hard HEAD        # Discard all changes
git revert <commit-id>       # Undo commit (safe, keeps history)
git reset --hard <commit-id> # Reset to commit (dangerous)
```

---

## 9. ðŸ”¹ Stash (Save Work Temporarily)

```bash
git stash                    # Stash changes
git stash list               # List stashes
git stash pop                # Reapply last stash
git stash drop               # Delete stash
```

---

## 10. ðŸ”¹ Tags

```bash
git tag v1.0                 # Create tag
git tag                      # List tags
git push origin v1.0         # Push tag
git push --tags              # Push all tags
```

---

## 11. ðŸ”¹ GitHub Flow (Pull Request)

1. Fork repo â†’ Clone â†’ Create branch
2. Make changes â†’ Commit â†’ Push branch
3. Open **Pull Request (PR)** on GitHub
4. Reviewer approves â†’ Merge PR â†’ Delete branch

Commands:

```bash
git push origin feature-branch
```

Then create PR from GitHub UI.

---

## 12. ðŸ”¹ GitLab Flow (Merge Request)

Similar to GitHub but called **Merge Request (MR)**.
Also integrates with **CI/CD Pipelines**.

---

## 13. ðŸ”¹ Git Collaboration Commands

```bash
git fetch origin                 # Get all remote updates
git pull origin develop          # Sync develop branch
git rebase origin/develop        # Rebase onto develop
git push origin feature-branch   # Push feature branch
```

---

## 14. ðŸ”¹ Common Workflows

### a) Feature Branch Workflow

```bash
git checkout -b feature-login
... work ...
git commit -am "Login feature"
git push origin feature-login
```

Then create PR/MR.

### b) Hotfix Workflow

```bash
git checkout main
git pull origin main
git checkout -b hotfix-bug
... fix ...
git commit -m "Bug fixed"
git push origin hotfix-bug
```

---

## 15. ðŸ”¹ Useful Shortcuts

```bash
git log --oneline --graph --all    # Visual commit history
git shortlog -sn                   # Show contributors
git reflog                         # Show history of HEAD
git cherry-pick <commit-id>        # Apply specific commit
```

---

âœ… With this, you have a **complete Git, GitHub & GitLab commands cheat sheet**.

Do you want me to also create a **visual workflow diagram (like GitHub flow + GitLab flow)** for easier memory?
